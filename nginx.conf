#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_shared_dict backend_pool 10m;

    init_by_lua_block {
        backends = {
            { host = "192.168.48.1", port = 8081 },
            { host = "192.168.48.1", port = 8082 },
            { host = "192.168.48.1", port = 8083 },
        }

        local dict = ngx.shared.backend_pool
        dict:set("counter", 0)
        dict:set("leader", 0)

        for i = 1, #backends do
            dict:set("status:" .. i, 1)
        end
    }

    init_worker_by_lua_block {
        local http = require("resty.http")

        local function health_check(premature)
            if premature then
                return
            end

            local dict = ngx.shared.backend_pool

            for i, backend in ipairs(backends) do
                local httpc, err = http.new()
                if not httpc then
                    ngx.log(ngx.ERR, "failed to create http client for backend ", i, ": ", err)
                    dict:set("status:" .. i, 0)
                else
                    httpc:set_timeout(1000)

                    local url = "http://" .. backend.host .. ":" .. backend.port .. "/health"
                    local res, err = httpc:request_uri(url, {
                        method = "GET",
                        headers = {
                            ["Host"] = backend.host,
                        },
                    })

                    if not res or res.status ~= 200 then
                        dict:set("status:" .. i, 0)
                    else
                        if res.body == "0" then
                            dict:set("status:" .. i, 1)
                        else
                            dict:set("leader", i)
                        end
                    end
                end
            end

            local ok, err = ngx.timer.at(5, health_check)
            if not ok then
                ngx.log(ngx.ERR, "failed to schedule health_check: ", err)
            end
        end

        local ok, err = ngx.timer.at(0.1, health_check)
        if not ok then
            ngx.log(ngx.ERR, "failed to start health_check: ", err)
        end
    }

    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080 default_server;
        server_name  _;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        set $target_host "";
        set $target_port "";

        location / {
            access_by_lua_block {
                local dict = ngx.shared.backend_pool
                local leader = dict:get("leader")
                local healthy = {}

                for i = 1, #backends do
                    if(dict:get("status:" .. i) or 0) == 1 and i ~= leader then
                        healthy[#healthy + 1] = i
                    end
                end

                local target_idx
                local is_ws = (ngx.var.http_upgrade or ""):lower() == "websocket"

                if ngx.req.get_method() ~= "POST" and not is_ws then
                    if #healthy > 0 then
                        local counter = dict:incr("counter", 1, 0)
                        target_idx = healthy[(counter % #healthy) + 1]
                    elseif leader_idx then
                        target_idx =  leader
                    end

                else
                    target_idx = leader
                end

                if not target_idx then
                    ngx.status = ngx.HTTP_BAD_GATEWAY
                    ngx.say("All back-ends are down")
                    return ngx.exit(ngx.HTTP_BAD_GATEWAY)
                end

                local chosen = backends[target_idx]
                ngx.var.target_host = chosen.host
                ngx.var.target_port = chosen.port
            }

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_read_timeout  86400s;

            proxy_pass http://$target_host:$target_port;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

}